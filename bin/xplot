#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Tue 28 Nov 2023

@author: Enrico Pedretti

Small program to render an image using ASE and povray
"""

import os, sys, json
import argparse
import xplot



def cli_parse():
    parser = argparse.ArgumentParser(
        description='Options for image rendering:'
        )

    parser.add_argument('-v', '--version', action='version', version='%(prog)s '+xplot.__version__)

    parser.add_argument('filename', help='Can be in any format readable by ASE (e.g. POSCAR/CONTCAR/vasprun.xml, xyz, cif, pwi/pwo, xsf...). Can also be a trajectory.')
    parser.add_argument('-i','--index', type=str, default='-1',
                        help="Index of the frame to be rendered in a trajectory, e.g. '0' (first), '-1' (last), ':' (all), '::10' (one every 10 frames). Default = -1")
    parser.add_argument('-o','--output', type=str, help='Output file name. Default = [filename].png')

    parser.add_argument('-r','--rotations', type=str, default='',
                        help="List of rotations for the visualization, e.g. 10z,-90x. Default = top view. Presets for front view: front (= -90x), front2 (90z,-90x). If the first rotation has a negative angle, preceed it with a dummy rotation, e.g. 0z,-90x. ")
    parser.add_argument('-s','--supercell', nargs = 3, type=int, help="Replicate the cell nx ny nz times.")
    parser.add_argument('-wr', '--wrap', action='store_true', default=False, help='Wrap atoms according to pbc. Default = False')
    parser.add_argument('-dc','--depth-cueing', nargs='?', type=float, const=1, help='Enable depth cueing. Optional parameter: intensity (>0, default=1).')
    parser.add_argument('-rc','--range-cut', nargs=2, type=float, help='Select range [zmin, zmax] to be displayed.')
    parser.add_argument('-cv','--cut-vacuum', action='store_true', help='Cut vacuum above and below the slab.')
    parser.add_argument('-cc', '--colorcode', type=str, choices=['forces', 'magmoms', 'coordnum'], help='Color atoms according to a property (e.g. forces, magnetic moments, coordination number).')
    parser.add_argument('--ccrange', nargs=2, type=float, help='[min, max] values for the colorcode.')
    parser.add_argument('-arr', '--arrows', type=str, choices=['forces', 'magmoms'], help='Draw arrows representing the vectors, with lenghth proportional to the magnitude.')
    parser.add_argument('-nobd','--nobonds', action='store_true', default=False, help='Do not show bonds' )

    parser.add_argument('-np','--nopov', action='store_true', default=False, help='Do not use povray for rendering. Default = use povray')
    parser.add_argument('-w', '--width-resolution', type=int, default=700, help='Horizontal resolution in pixels. Defaul = 700')

    parser.add_argument('-m','--movie', action='store_true', default=False, help='Create movie from the frames. Default = False')
    parser.add_argument('-f', '--framerate', type=int, default=10, help='Framerate of the movie (frames per second). Default = 10.')



    args = parser.parse_args()

    if args.rotations == 'front': args.rotations = '-90x'
    if args.rotations == 'front2': args.rotations = '90z,-90x'

    return args



def read_custom_settings():
    custom_settings_path = None
    default_custom_settings = False
    if os.path.isfile("custom_settings.json"):
        custom_settings_path = 'custom_settings.json'
    elif os.path.isfile(f"{os.path.dirname(__file__).rsplit('/',1)[0]}/custom_settings.json"):
        custom_settings_path = f"{os.path.dirname(__file__).rsplit('/',1)[0]}/custom_settings.json"
        default_custom_settings = True
    if custom_settings_path is not None:
        with open(custom_settings_path, "r") as f:
            custom_settings = json.load(f)
            print(f"Custom colors read from {'default' if default_custom_settings else ''}file.")
    else:
        custom_settings = None

    return custom_settings


def main():

    args = cli_parse()

    #try to read custom settings
    custom_settings = read_custom_settings()
    if custom_settings.get("povray_old_style", None):
        xplot.POVRAY_OLD_STYLE = True

    from xplot.functions import start_rendering

    start_rendering(filename = args.filename,
                    index = args.index,
                    movie = args.movie,
                    framerate = args.framerate,
                    custom_settings = custom_settings,
                    outfile = args.output,
                    rotations = args.rotations,
                    supercell = args.supercell,
                    wrap=args.wrap,
                    depth_cueing=args.depth_cueing,
                    range_cut=args.range_cut,
                    cut_vacuum=args.cut_vacuum,
                    colorcode=args.colorcode,
                    ccrange=args.ccrange,
                    arrows=args.arrows,
                    nobonds = args.nobonds,
                    povray = not args.nopov,
                    width_res = args.width_resolution,
                )


if __name__ == '__main__':
    sys.exit(main())